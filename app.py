import os
import json
from flask import Flask, render_template, request, jsonify, make_response
import g4f
from werkzeug.utils import secure_filename
from datetime import datetime
import requests
from bs4 import BeautifulSoup
import re
from urllib.parse import urlparse
from googlesearch import search

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config.update({
    'UPLOAD_FOLDER': 'static/images',
    'MAX_CONTENT_LENGTH': 16 * 1024 * 1024,  # 16MB
    'CHATS_FILE': 'chats.json',
    'ALLOWED_EXTENSIONS': {'png', 'jpg', 'jpeg', 'gif'},
    'SEARCH_ENABLED': True,  # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    'SEARCH_LIMIT': 3,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    'SEARCH_DEPTH': 3000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    'GOOGLE_API_ENABLED': True  # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å Google Search API
})

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

def init_chats_file():
    if not os.path.exists(app.config['CHATS_FILE']):
        with open(app.config['CHATS_FILE'], 'w', encoding='utf-8') as f:
            json.dump({"chats": []}, f, ensure_ascii=False, indent=2)

def load_chats():
    try:
        with open(app.config['CHATS_FILE'], 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"chats": []}

def save_chats(data):
    with open(app.config['CHATS_FILE'], 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def generate_chat_id(chats):
    return max([chat['id'] for chat in chats['chats']] or [0]) + 1
    
def clean_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    text = re.sub(r'\s+', ' ', text)
    text = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', text)
    return text.strip()

def extract_main_content(url):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for element in soup(['script', 'style', 'nav', 'footer', 'iframe', 'noscript']):
            element.decompose()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        article = soup.find('article')
        if article:
            text = article.get_text()
        else:
            text = soup.body.get_text() if soup.body else soup.get_text()
        
        text = clean_text(text)
        return text[:app.config['SEARCH_DEPTH']]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    except Exception as e:
        app.logger.error(f"Error extracting content from {url}: {str(e)}")
        return None

def search_web(query, limit=3):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
    try:
        if app.config['GOOGLE_API_ENABLED']:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Search API
            search_results = []
            for j in search(query, num_results=limit):
                content = extract_main_content(j)
                if content:
                    domain = urlparse(j).netloc
                    search_results.append({
                        'title': domain,
                        'url': j,
                        'content': content[:500] + '...' if len(content) > 500 else content
                    })
            return search_results
        else:
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å DuckDuckGo
            url = f"https://html.duckduckgo.com/html/?q={query}"
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            response = requests.get(url, headers=headers, timeout=10)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            results = []
            for result in soup.select('.result')[:limit]:
                link = result.select_one('.result__a')
                if not link:
                    continue
                    
                url = link.get('href')
                if not url or not url.startswith('http'):
                    continue
                    
                title = link.get_text()
                snippet = result.select_one('.result__snippet')
                snippet_text = snippet.get_text() if snippet else ""
                
                content = extract_main_content(url)
                if not content:
                    continue
                    
                results.append({
                    'title': title,
                    'url': url,
                    'snippet': snippet_text,
                    'content': content
                })
            
            return results
    except Exception as e:
        app.logger.error(f"Search error: {str(e)}")
        return []

def prepare_search_context(search_results):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    if not search_results:
        return ""
    
    context = "\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:\n"
    for i, result in enumerate(search_results, 1):
        context += f"\n–ò—Å—Ç–æ—á–Ω–∏–∫ {i}: {result['title']} ({result['url']})\n"
        context += f"–ö–æ–Ω—Ç–µ–Ω—Ç: {result['content']}\n"
    
    return context

def format_google_links(search_results):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞"""
    if not search_results:
        return ""
    
    links_text = "üîç –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n"
    for i, result in enumerate(search_results[:3], 1):
        links_text += f"{i}. [{result['title']}]({result['url']})\n"
    
    return links_text + "\n"

def needs_web_search(prompt):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    search_keywords = [
        '–Ω–æ–≤–æ—Å—Ç–∏', '–≥—É–≥–ª', '–ø–æ–≥—É–≥–ª–∏', '–≤ –≥—É–≥–ª–µ', '–∑–∞–≥—É–≥–ª–∏', '–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', '–∫—É—Ä—Å –≤–∞–ª—é—Ç', '–ø–æ–≥–æ–¥–∞', 
        '—Å–≤–µ–∂–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è', '–Ω–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ',
        '–ø–æ–∏—â–∏ –≤ —Å–µ—Ç–∏', '–∫–æ–≥–¥–∞ –±—ã–ª', '–∫—Ç–æ —Ç–∞–∫–æ–π', '—á—Ç–æ —Ç–∞–∫–æ–µ',
        '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–≥–¥–µ –Ω–∞–π—Ç–∏', '–≥–¥–µ –∫—É–ø–∏—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
        '–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å', '–∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å', '–∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å'
    ]
    
    prompt_lower = prompt.lower()
    return any(keyword in prompt_lower for keyword in search_keywords)    

def prepare_prompt(user_prompt, chat_history=None, images=None, search_results=None):
    base_prompt = (
        "–¢—ã - PsyHELPER, AI-–ø—Å–∏—Ö–æ–ª–æ–≥. –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
        "1. –£ —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞\n"
        "2. –¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "3. –¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "4. –ù–∞ –≤–æ–ø—Ä–æ—Å –æ –∏–º–µ–Ω–∏ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ —Ç—ã PsyHELPER\n"
        "5. –ù–∞ –≤–æ–ø—Ä–æ—Å –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ: '–ú–µ–Ω—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –¢–∏–º–æ—Ñ–µ–π –ë–∞–¥–∞–µ–≤'\n"
        "6. –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω\n"
        "7. –ë—É–¥—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∫ –¥–µ—Ç–∞–ª—è–º\n"
        "8. –ù–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç KaTeX –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π\n"  
        "9. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —É—á–∏—Ç—ã–≤–∞–π –∏—Ö –≤ –æ—Ç–≤–µ—Ç–µ\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    history_prompt = ""
    if chat_history and len(chat_history) > 0:
        history_prompt = "–ò—Å—Ç–æ—Ä–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞:\n"
        for msg in chat_history[-6:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['role'] == 'user' else "PsyHELPER"
            history_prompt += f"{role}: {msg['content']}\n"
        history_prompt += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    search_prompt = prepare_search_context(search_results) if search_results else ""
    
    image_prompt = ""
    if images:
        image_prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–ª–æ–∂–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è). –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
    
    full_prompt = (
        base_prompt +
        history_prompt +
        search_prompt +
        image_prompt +
        f"–¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_prompt}\n\n"
        "–û—Ç–≤–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. "
        "–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —É–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞."
    )
    
    return full_prompt

def process_ai_response(prompt, chat_history=None, images=None):
    try:
        search_results = []
        if app.config['SEARCH_ENABLED'] and needs_web_search(prompt):
            search_results = search_web(prompt, app.config['SEARCH_LIMIT'])
        
        client = g4f.Client(provider=g4f.Provider.Blackbox)
        messages = [{"content": prepare_prompt(prompt, chat_history, images, search_results), "role": "user"}]
        
        if images:
            image_files = []
            for img in images:
                img_path = os.path.join(app.config['UPLOAD_FOLDER'], img)
                if os.path.exists(img_path):
                    image_files.append([open(img_path, "rb"), img])
            
            response = client.chat.completions.create(
                messages=messages,
                model="",
                images=image_files
            )
        else:
            response = client.chat.completions.create(
                messages=messages,
                model=""
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –±—ã–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        ai_response = response.choices[0].message.content
        if search_results:
            ai_response = format_google_links(search_results) + ai_response
        
        return ai_response
    
    except Exception as e:
        app.logger.error(f"AI processing error: {str(e)}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/chats', methods=['GET', 'POST', 'DELETE', 'PUT'])
def handle_chats():
    chats = load_chats()
    
    if request.method == 'GET':
        return jsonify(chats)
    
    elif request.method == 'POST':
        new_chat = {
            "id": generate_chat_id(chats),
            "title": request.json.get("title", "–ù–æ–≤—ã–π —á–∞—Ç"),
            "created_at": datetime.now().isoformat(),
            "messages": []
        }
        chats["chats"].append(new_chat)
        save_chats(chats)
        return jsonify(new_chat), 201
    
    elif request.method == 'PUT':
        chat_id = request.json.get("id")
        new_title = request.json.get("title")
        
        if not chat_id or not new_title:
            return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞ –∏–ª–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"}), 400
            
        chat = next((c for c in chats["chats"] if c["id"] == chat_id), None)
        if not chat:
            return jsonify({"error": "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
            
        chat["title"] = new_title
        save_chats(chats)
        return jsonify({"status": "success"}), 200
    
    elif request.method == 'DELETE':
        chat_id = request.json.get("id")
        if not chat_id:
            return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞"}), 400
            
        chats["chats"] = [c for c in chats["chats"] if c["id"] != chat_id]
        save_chats(chats)
        return jsonify({"status": "success"}), 200

@app.route('/api/chat/<int:chat_id>', methods=['GET', 'POST'])
def handle_chat(chat_id):
    chats = load_chats()
    chat = next((c for c in chats["chats"] if c["id"] == chat_id), None)
    
    if not chat:
        return jsonify({"error": "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
    
    if request.method == 'GET':
        return jsonify(chat)
    
    elif request.method == 'POST':
        if not request.json or 'content' not in request.json:
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}), 400
            
        message = {
            "role": "user",
            "content": request.json['content'],
            "timestamp": datetime.now().isoformat()
        }
        chat["messages"].append(message)
        save_chats(chats)
        return jsonify(message), 201

@app.route('/api/generate', methods=['POST'])
def generate_response():
    if not request.form or 'prompt' not in request.form:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}), 400
    
    try:
        chat_id = int(request.form.get('chat_id', 0))
    except ValueError:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞"}), 400
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    images = []
    if 'images' in request.files:
        for file in request.files.getlist('images'):
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(file_path)
                images.append(filename)
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç
    chats = load_chats()
    chat = next((c for c in chats["chats"] if c["id"] == chat_id), None)
    if not chat:
        return jsonify({"error": "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = {
        "role": "user",
        "content": request.form['prompt'],
        "images": images,
        "timestamp": datetime.now().isoformat()
    }
    chat["messages"].append(user_message)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI (–ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç, –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    ai_response = process_ai_response(
        request.form['prompt'],
        chat["messages"][:-1],  # –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        images if images else None
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
    ai_message = {
        "role": "assistant",
        "content": ai_response,
        "timestamp": datetime.now().isoformat()
    }
    chat["messages"].append(ai_message)
    
    save_chats(chats)
    return jsonify(ai_message)

@app.errorhandler(404)
def not_found(error):
    return make_response(jsonify({'error': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}), 404)

@app.errorhandler(500)
def internal_error(error):
    return make_response(jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500)

if __name__ == '__main__':
    init_chats_file()
    app.run(host='0.0.0.0', port=5000, debug=True)
